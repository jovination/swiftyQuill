generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model User {
  id             String          @id @default(cuid())
  username       String          @unique
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?

  accounts       Account[]
  sessions       Session[]
  subscription   Subscription?
  payments       UserPayment[]
  notes          Note[]
  tags           Tag[]

  @@index([email])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@index([identifier])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAUSED
}

model Subscription {
  id                   String            @id @default(cuid())
  userId               String            @unique
  plan                 String
  status               SubscriptionStatus @default(ACTIVE)
  startDate            DateTime          @default(now())
  endDate              DateTime
  paymentMethod        String?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model UserPayment {
  id             String       @id @default(cuid())
  userId         String
  amount         Float
  currency       String
  paymentMethod  String
  transactionId  String       @unique
  status         PaymentStatus @default(PENDING)
  paymentDate    DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Note {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String
  imageUrl    String?
  isStarred   Boolean  @default(false)
  isShared    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        NoteTag[]
  sharedNotes SharedNote[]

  @@index([userId])
}

model Tag {
  id         String   @id @default(cuid())
  name       String
  userId     String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes      NoteTag[]

  @@unique([name, userId])
  @@index([userId])
}

model NoteTag {
  noteId String
  tagId  String

  note   Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
}

model SharedNote {
  id               String   @id @default(cuid())
  noteId           String
  sharedWithUserId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  note             Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
  @@index([sharedWithUserId])
}